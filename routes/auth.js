
const express = require('express');
const { User } = require('../models/user');
const router = express.Router();
const _ = require('lodash');
const bcrypt = require('bcrypt');
const Joi = require('joi');


router.post('/', async (req, res) => {

    const { error } = validate(req.body);
    if (error) return res.status(400).send(error.details[0].message);

    let user = await User.findOne({ email: req.body.email });
    if (!user) return res.status(400).send('invalid email or password');

    const validPassword = await bcrypt.compare(req.body.password, user.password);
    if (!validPassword) return res.status(400).send('invalid email or passwordxx');

    // const token = jwt.sign({
    //     _id: user._id,
    //     name: user.name,
    //     email: user.email
    // },
    //     config.get('jwtwebtoken')
    // );

 
    // const token = user.generateAuthToken()
    // res.send(token);

    const token = user.generateAuthToken();
    res.send(token);

    

});




function validate(req) {
    const schema = Joi.object({
        email: Joi.string().required().email().max(50),
        password: Joi.string().required().min(5).max(1024)
    });

    return schema.validate(req);
}


function validateUser(user) {
    const schema = Joi.object({
        
    })
}
module.exports = router;
// JSON web token
// a long string that identify user
// so when ever client login json web token is generated by served and is given back to client