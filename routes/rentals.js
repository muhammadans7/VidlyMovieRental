const express = require('express');
const { Rental, validate } = require('../models/rental');
const { Movie } = require('../models/movie');
const { Customer } = require('../models/customer');


const router = express.Router();

router.get('/', async (req, res) => {
    
    const rentals = await Rental.find();

    res.send(rentals);
});




router.post('/', async (req, res) => {
    
    const { error } = validate(req.body);
    if (error) return res.status(400).send(error.details[0].message);

    const theMovie = await Movie.findById(req.body.movieId);
    if (!theMovie) return res.status(404).send('invalid movie id');

    const theCustomer = await Customer.findById(req.body.customerId);
    if (!theCustomer) return res.status(404).send('invalid customer id');


    const rental = new Rental({ // at this point id is already generated by mongodb driver
        movie: {
            _id: theMovie._id,
            title: theMovie.title,
            genre: {
                _id: theMovie.genre._id,
                name: theMovie.genre.name
            },

        },
        customer: {
            _id: theCustomer._id,
            name: theCustomer.name,
            isGold: theCustomer.isGold,
            phone: theCustomer.phone
        },
        dateOut: req.body.dateOut,
        dateReturned: req.body.dateReturned,
        rentalFee: req.body.rentalFee
    });

    // try {
        
    //     new Fawn.Task()
    //         .save('rentals', rental)
    //         .update('movies', { _id: theMovie._id }, {
    //             $inc: { numberInStock: -1 }
    //         })
    //         .run()
        
    //     res.send(rental);
    // }
    // catch (ex) {
    //     res.status(500).send('internal server error');
    // }

    
    await rental.save();

    res.send(rental);
});


router.put('/:id', async (req, res) => {
    const theMovie = await Movie.findById(req.body.movieId);
    if (!theMovie) return res.status(404).send("invalid movie id");

    const theCustomer = await Customer.findById(req.body.customerId);
    if (!theCustomer) return res.status(404).send('invalid customer id');

    const { error } = validate(req.body);

    if (error) return res.status(400).send(error.details[0].message);

    const rental = await Rental.updateOne({ _id: req.params.id },
        {
            $set: {
                movie: {
                    _id: theMovie._id,
                    title: theMovie.title,
                    genre: {
                        _id: theMovie.genre._id,
                        name: theMovie.genre.name
                    },
        
                },
                customer: {
                    _id: theCustomer._id,
                    name: theCustomer.name,
                    isGold: theCustomer.isGold,
                    phone: theCustomer.phone
                },
                dateOut: req.body.dateOut,
                dateReturned: req.body.dateReturned,
                rentalFee: req.body.rentalFee
                    
            }
        },
        { new: true }
        
    );

    res.send(rental);
});

router.delete('/:id', async (req, res) => {
    const rental = await Rental.findByIdAndDelete(req.params.id);

    if (!rental) return res.status(404).send('not found');

    res.send(rental);
});

router.get('/:id', async (req, res) => {
    const rental = await Rental.findById(req.params.id);

    if (!rental) return res.status(404).send('not found');

    res.send(rental);
});


module.exports = router;

